// Code generated by go generate; DO NOT EDIT.
// This file was generated by github.com/golangee/i18n

package i18n

import (
	"fmt"
	i18n "github.com/golangee/i18n"
)

func init() {
	var tag string

	// from strings-de-DE.xml
	tag = "de-DE"

	i18n.ImportValue(i18n.NewText(tag, "count", "Anzahl"))
	i18n.ImportValue(i18n.NewText(tag, "count_report_from_bot", "Meldungswiederholungen vom Bot"))
	i18n.ImportValue(i18n.NewText(tag, "info", "Information"))
	i18n.ImportValue(i18n.NewText(tag, "internal_error", "Interner Fehler"))
	i18n.ImportValue(i18n.NewText(tag, "last_seen", "Zu letzt gesehen"))
	i18n.ImportValue(i18n.NewText(tag, "message", "Nachricht"))
	i18n.ImportValue(i18n.NewText(tag, "namespace", "Namespace"))
	i18n.ImportValue(i18n.NewText(tag, "object", "Resource"))
	i18n.ImportValue(i18n.NewText(tag, "pod", "Pod"))
	i18n.ImportValue(i18n.NewText(tag, "reason", "Grund"))
	i18n.ImportValue(i18n.NewText(tag, "restarts", "Neustarts"))
	i18n.ImportValue(i18n.NewText(tag, "unexpected_event", ""))
	i18n.ImportValue(i18n.NewText(tag, "warning", "Warnung"))
	i18n.ImportValue(i18n.NewText(tag, "warning_restart_pod", "Der angegebene Pod startet aktuell öfters neu!"))
	_ = tag

}

// Resources wraps the package strings to get invoked safely.
type Resources struct {
	res *i18n.Resources
}

// NewResources creates a new localized resource instance.
func NewResources(locale string) Resources {
	return Resources{i18n.From(locale)}
}

// Count returns a translated text for "Anzahl"
func (r Resources) Count() string {
	str, err := r.res.Text("count")
	if err != nil {
		return fmt.Errorf("MISS!count: %w", err).Error()
	}
	return str
}

// CountReportFromBot returns a translated text for "Meldungswiederholungen vom Bot"
func (r Resources) CountReportFromBot() string {
	str, err := r.res.Text("count_report_from_bot")
	if err != nil {
		return fmt.Errorf("MISS!count_report_from_bot: %w", err).Error()
	}
	return str
}

// Info returns a translated text for "Information"
func (r Resources) Info() string {
	str, err := r.res.Text("info")
	if err != nil {
		return fmt.Errorf("MISS!info: %w", err).Error()
	}
	return str
}

// InternalError returns a translated text for "Interner Fehler"
func (r Resources) InternalError() string {
	str, err := r.res.Text("internal_error")
	if err != nil {
		return fmt.Errorf("MISS!internal_error: %w", err).Error()
	}
	return str
}

// LastSeen returns a translated text for "Zu letzt gesehen"
func (r Resources) LastSeen() string {
	str, err := r.res.Text("last_seen")
	if err != nil {
		return fmt.Errorf("MISS!last_seen: %w", err).Error()
	}
	return str
}

// Message returns a translated text for "Nachricht"
func (r Resources) Message() string {
	str, err := r.res.Text("message")
	if err != nil {
		return fmt.Errorf("MISS!message: %w", err).Error()
	}
	return str
}

// Namespace returns a translated text for "Namespace"
func (r Resources) Namespace() string {
	str, err := r.res.Text("namespace")
	if err != nil {
		return fmt.Errorf("MISS!namespace: %w", err).Error()
	}
	return str
}

// Object returns a translated text for "Resource"
func (r Resources) Object() string {
	str, err := r.res.Text("object")
	if err != nil {
		return fmt.Errorf("MISS!object: %w", err).Error()
	}
	return str
}

// Pod returns a translated text for "Pod"
func (r Resources) Pod() string {
	str, err := r.res.Text("pod")
	if err != nil {
		return fmt.Errorf("MISS!pod: %w", err).Error()
	}
	return str
}

// Reason returns a translated text for "Grund"
func (r Resources) Reason() string {
	str, err := r.res.Text("reason")
	if err != nil {
		return fmt.Errorf("MISS!reason: %w", err).Error()
	}
	return str
}

// Restarts returns a translated text for "Neustarts"
func (r Resources) Restarts() string {
	str, err := r.res.Text("restarts")
	if err != nil {
		return fmt.Errorf("MISS!restarts: %w", err).Error()
	}
	return str
}

// UnexpectedEvent returns a translated text for ""
func (r Resources) UnexpectedEvent() string {
	str, err := r.res.Text("unexpected_event")
	if err != nil {
		return fmt.Errorf("MISS!unexpected_event: %w", err).Error()
	}
	return str
}

// Warning returns a translated text for "Warnung"
func (r Resources) Warning() string {
	str, err := r.res.Text("warning")
	if err != nil {
		return fmt.Errorf("MISS!warning: %w", err).Error()
	}
	return str
}

// WarningRestartPod returns a translated text for "Der angegebene Pod startet aktuell öfters neu!"
func (r Resources) WarningRestartPod() string {
	str, err := r.res.Text("warning_restart_pod")
	if err != nil {
		return fmt.Errorf("MISS!warning_restart_pod: %w", err).Error()
	}
	return str
}

// FuncMap returns the named functions to be used with a template
func (r Resources) FuncMap() map[string]interface{} {
	m := make(map[string]interface{})
	m["Count"] = r.Count
	m["CountReportFromBot"] = r.CountReportFromBot
	m["Info"] = r.Info
	m["InternalError"] = r.InternalError
	m["LastSeen"] = r.LastSeen
	m["Message"] = r.Message
	m["Namespace"] = r.Namespace
	m["Object"] = r.Object
	m["Pod"] = r.Pod
	m["Reason"] = r.Reason
	m["Restarts"] = r.Restarts
	m["UnexpectedEvent"] = r.UnexpectedEvent
	m["Warning"] = r.Warning
	m["WarningRestartPod"] = r.WarningRestartPod
	return m
}
